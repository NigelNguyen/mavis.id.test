/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface LotteryInterface extends utils.Interface {
  functions: {
    "max_numbers_per_player()": FunctionFragment;
    "max_players()": FunctionFragment;
    "max_points_per_number()": FunctionFragment;
    "max_points_per_player()": FunctionFragment;
    "point_value()": FunctionFragment;
    "reward_ratio()": FunctionFragment;
    "time_submit()": FunctionFragment;
    "addmoderator(address)": FunctionFragment;
    "allnumbers(uint256)": FunctionFragment;
    "get_all_numbers()": FunctionFragment;
    "get_all_numbers_and_points()": FunctionFragment;
    "get_all_players_address()": FunctionFragment;
    "get_player_numbers(address)": FunctionFragment;
    "get_player_numbers_and_points(address)": FunctionFragment;
    "get_player_points(address)": FunctionFragment;
    "get_player_points_per_number(address,uint8)": FunctionFragment;
    "get_points_per_number(uint8)": FunctionFragment;
    "get_total_reward()": FunctionFragment;
    "get_winners()": FunctionFragment;
    "ismoderator(address)": FunctionFragment;
    "moderators(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "pause_submit()": FunctionFragment;
    "playeraddresses(uint256)": FunctionFragment;
    "players(address)": FunctionFragment;
    "pointspernumber(uint8)": FunctionFragment;
    "removemoderator(address)": FunctionFragment;
    "reset_all()": FunctionFragment;
    "set_max_numbers_per_player(uint256)": FunctionFragment;
    "set_max_players(uint256)": FunctionFragment;
    "set_max_points_per_number(uint256)": FunctionFragment;
    "set_max_points_per_player(uint256)": FunctionFragment;
    "set_point_value(uint256)": FunctionFragment;
    "set_reward_ratio(uint256)": FunctionFragment;
    "set_time_to_submit(uint256)": FunctionFragment;
    "submit_lottery_number(uint8)": FunctionFragment;
    "submit_numbers(uint8[],uint256[])": FunctionFragment;
    "transfer_money_to_winner()": FunctionFragment;
    "transfer_owner(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "winners(uint256)": FunctionFragment;
    "withdraw_all()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "max_numbers_per_player"
      | "max_players"
      | "max_points_per_number"
      | "max_points_per_player"
      | "point_value"
      | "reward_ratio"
      | "time_submit"
      | "addmoderator"
      | "allnumbers"
      | "get_all_numbers"
      | "get_all_numbers_and_points"
      | "get_all_players_address"
      | "get_player_numbers"
      | "get_player_numbers_and_points"
      | "get_player_points"
      | "get_player_points_per_number"
      | "get_points_per_number"
      | "get_total_reward"
      | "get_winners"
      | "ismoderator"
      | "moderators"
      | "owner"
      | "pause"
      | "pause_submit"
      | "playeraddresses"
      | "players"
      | "pointspernumber"
      | "removemoderator"
      | "reset_all"
      | "set_max_numbers_per_player"
      | "set_max_players"
      | "set_max_points_per_number"
      | "set_max_points_per_player"
      | "set_point_value"
      | "set_reward_ratio"
      | "set_time_to_submit"
      | "submit_lottery_number"
      | "submit_numbers"
      | "transfer_money_to_winner"
      | "transfer_owner"
      | "unpause"
      | "winners"
      | "withdraw_all"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "max_numbers_per_player",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "max_players",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "max_points_per_number",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "max_points_per_player",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "point_value",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reward_ratio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "time_submit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addmoderator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allnumbers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get_all_numbers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get_all_numbers_and_points",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get_all_players_address",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get_player_numbers",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "get_player_numbers_and_points",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "get_player_points",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "get_player_points_per_number",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get_points_per_number",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get_total_reward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get_winners",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ismoderator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "moderators",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pause_submit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "playeraddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "players", values: [string]): string;
  encodeFunctionData(
    functionFragment: "pointspernumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removemoderator",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "reset_all", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "set_max_numbers_per_player",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "set_max_players",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "set_max_points_per_number",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "set_max_points_per_player",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "set_point_value",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "set_reward_ratio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "set_time_to_submit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submit_lottery_number",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submit_numbers",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer_money_to_winner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer_owner",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "winners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw_all",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "max_numbers_per_player",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "max_players",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "max_points_per_number",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "max_points_per_player",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "point_value",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reward_ratio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "time_submit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addmoderator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allnumbers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get_all_numbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_all_numbers_and_points",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_all_players_address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_player_numbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_player_numbers_and_points",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_player_points",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_player_points_per_number",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_points_per_number",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_total_reward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_winners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ismoderator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "moderators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pause_submit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playeraddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pointspernumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removemoderator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reset_all", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "set_max_numbers_per_player",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_max_players",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_max_points_per_number",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_max_points_per_player",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_point_value",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_reward_ratio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_time_to_submit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submit_lottery_number",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submit_numbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transfer_money_to_winner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transfer_owner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "winners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdraw_all",
    data: BytesLike
  ): Result;

  events: {
    "numbersubmitted(address,uint8,uint256)": EventFragment;
    "resetall(address)": EventFragment;
    "submitlotterynumber(address,uint8)": EventFragment;
    "transfermoneytowinner(address,uint256)": EventFragment;
    "transferowner(address,address)": EventFragment;
    "withdrawall(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "numbersubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "resetall"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "submitlotterynumber"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "transfermoneytowinner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "transferowner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "withdrawall"): EventFragment;
}

export interface numbersubmittedEventObject {
  player: string;
  number: number;
  points: BigNumber;
}
export type numbersubmittedEvent = TypedEvent<
  [string, number, BigNumber],
  numbersubmittedEventObject
>;

export type numbersubmittedEventFilter = TypedEventFilter<numbersubmittedEvent>;

export interface resetallEventObject {
  caller: string;
}
export type resetallEvent = TypedEvent<[string], resetallEventObject>;

export type resetallEventFilter = TypedEventFilter<resetallEvent>;

export interface submitlotterynumberEventObject {
  caller: string;
  luckynumber: number;
}
export type submitlotterynumberEvent = TypedEvent<
  [string, number],
  submitlotterynumberEventObject
>;

export type submitlotterynumberEventFilter =
  TypedEventFilter<submitlotterynumberEvent>;

export interface transfermoneytowinnerEventObject {
  winner: string;
  amount: BigNumber;
}
export type transfermoneytowinnerEvent = TypedEvent<
  [string, BigNumber],
  transfermoneytowinnerEventObject
>;

export type transfermoneytowinnerEventFilter =
  TypedEventFilter<transfermoneytowinnerEvent>;

export interface transferownerEventObject {
  caller: string;
  owner: string;
}
export type transferownerEvent = TypedEvent<
  [string, string],
  transferownerEventObject
>;

export type transferownerEventFilter = TypedEventFilter<transferownerEvent>;

export interface withdrawallEventObject {
  caller: string;
  amount: BigNumber;
}
export type withdrawallEvent = TypedEvent<
  [string, BigNumber],
  withdrawallEventObject
>;

export type withdrawallEventFilter = TypedEventFilter<withdrawallEvent>;

export interface Lottery extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LotteryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    max_numbers_per_player(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    max_players(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    max_points_per_number(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    max_points_per_player(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    point_value(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reward_ratio(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    time_submit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addmoderator(
      _moderator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allnumbers(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    get_all_numbers(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    get_all_numbers_and_points(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    get_all_players_address(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    get_player_numbers(
      playeraddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    get_player_numbers_and_points(
      playeraddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    get_player_points(
      playeraddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    get_player_points_per_number(
      playeraddress: string,
      number: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    get_points_per_number(
      number: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    get_total_reward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    get_winners(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ismoderator(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    moderators(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pause_submit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    playeraddresses(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    players(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pointspernumber(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removemoderator(
      _moderator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reset_all(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    set_max_numbers_per_player(
      _new_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    set_max_players(
      _new_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    set_max_points_per_number(
      _new_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    set_max_points_per_player(
      _new_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    set_point_value(
      _new_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    set_reward_ratio(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    set_time_to_submit(
      _new_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submit_lottery_number(
      luckynumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submit_numbers(
      numbers: BigNumberish[],
      points: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transfer_money_to_winner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transfer_owner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    winners(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw_all(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  max_numbers_per_player(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  max_players(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  max_points_per_number(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  max_points_per_player(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  point_value(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reward_ratio(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  time_submit(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addmoderator(
    _moderator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allnumbers(
    arg0: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  get_all_numbers(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  get_all_numbers_and_points(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  get_all_players_address(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  get_player_numbers(
    playeraddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  get_player_numbers_and_points(
    playeraddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  get_player_points(
    playeraddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  get_player_points_per_number(
    playeraddress: string,
    number: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  get_points_per_number(
    number: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  get_total_reward(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  get_winners(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ismoderator(
    _address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  moderators(
    arg0: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pause_submit(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  playeraddresses(
    arg0: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  players(
    arg0: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pointspernumber(
    arg0: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removemoderator(
    _moderator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reset_all(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  set_max_numbers_per_player(
    _new_value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  set_max_players(
    _new_value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  set_max_points_per_number(
    _new_value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  set_max_points_per_player(
    _new_value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  set_point_value(
    _new_value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  set_reward_ratio(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  set_time_to_submit(
    _new_value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submit_lottery_number(
    luckynumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submit_numbers(
    numbers: BigNumberish[],
    points: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transfer_money_to_winner(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transfer_owner(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  winners(
    arg0: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw_all(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    max_numbers_per_player(overrides?: CallOverrides): Promise<BigNumber>;

    max_players(overrides?: CallOverrides): Promise<BigNumber>;

    max_points_per_number(overrides?: CallOverrides): Promise<BigNumber>;

    max_points_per_player(overrides?: CallOverrides): Promise<BigNumber>;

    point_value(overrides?: CallOverrides): Promise<BigNumber>;

    reward_ratio(overrides?: CallOverrides): Promise<BigNumber>;

    time_submit(overrides?: CallOverrides): Promise<BigNumber>;

    addmoderator(_moderator: string, overrides?: CallOverrides): Promise<void>;

    allnumbers(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

    get_all_numbers(overrides?: CallOverrides): Promise<number[]>;

    get_all_numbers_and_points(
      overrides?: CallOverrides
    ): Promise<[number[], BigNumber[]]>;

    get_all_players_address(overrides?: CallOverrides): Promise<string[]>;

    get_player_numbers(
      playeraddress: string,
      overrides?: CallOverrides
    ): Promise<number[]>;

    get_player_numbers_and_points(
      playeraddress: string,
      overrides?: CallOverrides
    ): Promise<[number[], BigNumber[]]>;

    get_player_points(
      playeraddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_player_points_per_number(
      playeraddress: string,
      number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_points_per_number(
      number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get_total_reward(overrides?: CallOverrides): Promise<BigNumber>;

    get_winners(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { playeraddress: string; points: BigNumber }[]
    >;

    ismoderator(_address: string, overrides?: CallOverrides): Promise<boolean>;

    moderators(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    pause_submit(overrides?: CallOverrides): Promise<boolean>;

    playeraddresses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    players(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { playeraddress: string; points: BigNumber }
    >;

    pointspernumber(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removemoderator(
      _moderator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    reset_all(overrides?: CallOverrides): Promise<void>;

    set_max_numbers_per_player(
      _new_value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    set_max_players(
      _new_value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    set_max_points_per_number(
      _new_value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    set_max_points_per_player(
      _new_value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    set_point_value(
      _new_value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    set_reward_ratio(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    set_time_to_submit(
      _new_value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    submit_lottery_number(
      luckynumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { playeraddress: string; points: BigNumber }[]
    >;

    submit_numbers(
      numbers: BigNumberish[],
      points: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    transfer_money_to_winner(overrides?: CallOverrides): Promise<void>;

    transfer_owner(_owner: string, overrides?: CallOverrides): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    winners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { playeraddress: string; points: BigNumber }
    >;

    withdraw_all(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "numbersubmitted(address,uint8,uint256)"(
      player?: string | null,
      number?: null,
      points?: null
    ): numbersubmittedEventFilter;
    numbersubmitted(
      player?: string | null,
      number?: null,
      points?: null
    ): numbersubmittedEventFilter;

    "resetall(address)"(caller?: string | null): resetallEventFilter;
    resetall(caller?: string | null): resetallEventFilter;

    "submitlotterynumber(address,uint8)"(
      caller?: string | null,
      luckynumber?: null
    ): submitlotterynumberEventFilter;
    submitlotterynumber(
      caller?: string | null,
      luckynumber?: null
    ): submitlotterynumberEventFilter;

    "transfermoneytowinner(address,uint256)"(
      winner?: string | null,
      amount?: null
    ): transfermoneytowinnerEventFilter;
    transfermoneytowinner(
      winner?: string | null,
      amount?: null
    ): transfermoneytowinnerEventFilter;

    "transferowner(address,address)"(
      caller?: string | null,
      owner?: null
    ): transferownerEventFilter;
    transferowner(
      caller?: string | null,
      owner?: null
    ): transferownerEventFilter;

    "withdrawall(address,uint256)"(
      caller?: string | null,
      amount?: null
    ): withdrawallEventFilter;
    withdrawall(caller?: string | null, amount?: null): withdrawallEventFilter;
  };

  estimateGas: {
    max_numbers_per_player(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    max_players(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    max_points_per_number(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    max_points_per_player(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    point_value(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reward_ratio(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    time_submit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addmoderator(
      _moderator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allnumbers(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    get_all_numbers(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    get_all_numbers_and_points(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    get_all_players_address(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    get_player_numbers(
      playeraddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    get_player_numbers_and_points(
      playeraddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    get_player_points(
      playeraddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    get_player_points_per_number(
      playeraddress: string,
      number: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    get_points_per_number(
      number: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    get_total_reward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    get_winners(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ismoderator(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    moderators(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pause_submit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    playeraddresses(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    players(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pointspernumber(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removemoderator(
      _moderator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reset_all(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    set_max_numbers_per_player(
      _new_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    set_max_players(
      _new_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    set_max_points_per_number(
      _new_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    set_max_points_per_player(
      _new_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    set_point_value(
      _new_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    set_reward_ratio(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    set_time_to_submit(
      _new_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submit_lottery_number(
      luckynumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submit_numbers(
      numbers: BigNumberish[],
      points: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transfer_money_to_winner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transfer_owner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    winners(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw_all(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    max_numbers_per_player(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    max_players(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    max_points_per_number(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    max_points_per_player(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    point_value(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reward_ratio(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    time_submit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addmoderator(
      _moderator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allnumbers(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    get_all_numbers(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    get_all_numbers_and_points(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    get_all_players_address(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    get_player_numbers(
      playeraddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    get_player_numbers_and_points(
      playeraddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    get_player_points(
      playeraddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    get_player_points_per_number(
      playeraddress: string,
      number: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    get_points_per_number(
      number: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    get_total_reward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    get_winners(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ismoderator(
      _address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    moderators(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pause_submit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    playeraddresses(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    players(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pointspernumber(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removemoderator(
      _moderator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reset_all(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    set_max_numbers_per_player(
      _new_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    set_max_players(
      _new_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    set_max_points_per_number(
      _new_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    set_max_points_per_player(
      _new_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    set_point_value(
      _new_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    set_reward_ratio(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    set_time_to_submit(
      _new_value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submit_lottery_number(
      luckynumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submit_numbers(
      numbers: BigNumberish[],
      points: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transfer_money_to_winner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transfer_owner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    winners(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw_all(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
