/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IERC20StakingManager {
  export type BlockRewardStruct = {
    fromBlock: BigNumberish;
    rewardPerBlock: BigNumberish;
  };

  export type BlockRewardStructOutput = [BigNumber, BigNumber] & {
    fromBlock: BigNumber;
    rewardPerBlock: BigNumber;
  };

  export type UserRewardStruct = {
    debitedRewards: BigNumberish;
    creditedRewards: BigNumberish;
    lastClaimedTimestamp: BigNumberish;
  };

  export type UserRewardStructOutput = [BigNumber, BigNumber, BigNumber] & {
    debitedRewards: BigNumber;
    creditedRewards: BigNumber;
    lastClaimedTimestamp: BigNumber;
  };

  export type PoolStruct = {
    stakingToken: string;
    rewardToken: string;
    accumulatedRewardsPerShare: BigNumberish;
    lastSyncedBlock: BigNumberish;
    startedAtBlock: BigNumberish;
  };

  export type PoolStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    stakingToken: string;
    rewardToken: string;
    accumulatedRewardsPerShare: BigNumber;
    lastSyncedBlock: BigNumber;
    startedAtBlock: BigNumber;
  };
}

export interface ERC20StakingManagerInterface extends utils.Interface {
  functions: {
    "WRON()": FunctionFragment;
    "admin()": FunctionFragment;
    "allocateRewards(address)": FunctionFragment;
    "blockRewards(address,uint256)": FunctionFragment;
    "canObtainRewards(address,address)": FunctionFragment;
    "changeAdmin(address)": FunctionFragment;
    "getBlockReward(address,uint256)": FunctionFragment;
    "getIntervalRewards(address,uint256,uint256)": FunctionFragment;
    "getPendingRewards(address,address)": FunctionFragment;
    "getPoolInfo(address)": FunctionFragment;
    "isPoolStarted(address)": FunctionFragment;
    "isPoolWhitelisted(address)": FunctionFragment;
    "minClaimedTimeWindow()": FunctionFragment;
    "poolInfo(address)": FunctionFragment;
    "removeAdmin()": FunctionFragment;
    "resetRewards(address)": FunctionFragment;
    "setFutureBlockReward(address,uint256,uint256)": FunctionFragment;
    "setMinClaimedTimeWindow(uint256)": FunctionFragment;
    "syncPool(address)": FunctionFragment;
    "syncRewardInfo(address,uint256)": FunctionFragment;
    "updateUnstartedPools(address[],uint256[],uint256[])": FunctionFragment;
    "userRewardInfo(address,address)": FunctionFragment;
    "whitelistPools(address[],uint256[],uint256[])": FunctionFragment;
    "withdrawEther()": FunctionFragment;
    "withdrawToken(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "WRON"
      | "admin"
      | "allocateRewards"
      | "blockRewards"
      | "canObtainRewards"
      | "changeAdmin"
      | "getBlockReward"
      | "getIntervalRewards"
      | "getPendingRewards"
      | "getPoolInfo"
      | "isPoolStarted"
      | "isPoolWhitelisted"
      | "minClaimedTimeWindow"
      | "poolInfo"
      | "removeAdmin"
      | "resetRewards"
      | "setFutureBlockReward"
      | "setMinClaimedTimeWindow"
      | "syncPool"
      | "syncRewardInfo"
      | "updateUnstartedPools"
      | "userRewardInfo"
      | "whitelistPools"
      | "withdrawEther"
      | "withdrawToken"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "WRON", values?: undefined): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allocateRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "blockRewards",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canObtainRewards",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "changeAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getBlockReward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIntervalRewards",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingRewards",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "getPoolInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isPoolStarted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isPoolWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "minClaimedTimeWindow",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "poolInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFutureBlockReward",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinClaimedTimeWindow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "syncPool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "syncRewardInfo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUnstartedPools",
    values: [string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "userRewardInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistPools",
    values: [string[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEther",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "WRON", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allocateRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canObtainRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIntervalRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPoolStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPoolWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minClaimedTimeWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFutureBlockReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinClaimedTimeWindow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "syncPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "syncRewardInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUnstartedPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRewardInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "AdminRemoved(address)": EventFragment;
    "MinClaimedTimeWindowUpdated(uint256,uint256)": EventFragment;
    "PoolSynced(address,uint256,uint256)": EventFragment;
    "PoolWhitelisted(address)": EventFragment;
    "RewardPerBlockUpdated(address,tuple[])": EventFragment;
    "UserRewardUpdated(address,address,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminRemoved"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MinClaimedTimeWindowUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolSynced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolWhitelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPerBlockUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserRewardUpdated"): EventFragment;
}

export interface AdminChangedEventObject {
  _oldAdmin: string;
  _newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface AdminRemovedEventObject {
  _oldAdmin: string;
}
export type AdminRemovedEvent = TypedEvent<[string], AdminRemovedEventObject>;

export type AdminRemovedEventFilter = TypedEventFilter<AdminRemovedEvent>;

export interface MinClaimedTimeWindowUpdatedEventObject {
  _new: BigNumber;
  _old: BigNumber;
}
export type MinClaimedTimeWindowUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  MinClaimedTimeWindowUpdatedEventObject
>;

export type MinClaimedTimeWindowUpdatedEventFilter =
  TypedEventFilter<MinClaimedTimeWindowUpdatedEvent>;

export interface PoolSyncedEventObject {
  _pool: string;
  _accumulatedPerShare: BigNumber;
  _lastSyncedBlock: BigNumber;
}
export type PoolSyncedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PoolSyncedEventObject
>;

export type PoolSyncedEventFilter = TypedEventFilter<PoolSyncedEvent>;

export interface PoolWhitelistedEventObject {
  _pool: string;
}
export type PoolWhitelistedEvent = TypedEvent<
  [string],
  PoolWhitelistedEventObject
>;

export type PoolWhitelistedEventFilter = TypedEventFilter<PoolWhitelistedEvent>;

export interface RewardPerBlockUpdatedEventObject {
  _pool: string;
  _blockRewards: IERC20StakingManager.BlockRewardStructOutput[];
}
export type RewardPerBlockUpdatedEvent = TypedEvent<
  [string, IERC20StakingManager.BlockRewardStructOutput[]],
  RewardPerBlockUpdatedEventObject
>;

export type RewardPerBlockUpdatedEventFilter =
  TypedEventFilter<RewardPerBlockUpdatedEvent>;

export interface UserRewardUpdatedEventObject {
  _pool: string;
  _user: string;
  _rewardInfo: IERC20StakingManager.UserRewardStructOutput;
}
export type UserRewardUpdatedEvent = TypedEvent<
  [string, string, IERC20StakingManager.UserRewardStructOutput],
  UserRewardUpdatedEventObject
>;

export type UserRewardUpdatedEventFilter =
  TypedEventFilter<UserRewardUpdatedEvent>;

export interface ERC20StakingManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC20StakingManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    WRON(overrides?: CallOverrides): Promise<[string]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    allocateRewards(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    blockRewards(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        fromBlock: BigNumber;
        rewardPerBlock: BigNumber;
      }
    >;

    canObtainRewards(
      _pool: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    changeAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBlockReward(
      _pool: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _reward: BigNumber }>;

    getIntervalRewards(
      _pool: string,
      _fromBlock: BigNumberish,
      _toBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _result: BigNumber }>;

    getPendingRewards(
      _pool: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPoolInfo(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<[IERC20StakingManager.PoolStructOutput]>;

    isPoolStarted(_pool: string, overrides?: CallOverrides): Promise<[boolean]>;

    isPoolWhitelisted(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    minClaimedTimeWindow(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber] & {
        stakingToken: string;
        rewardToken: string;
        accumulatedRewardsPerShare: BigNumber;
        lastSyncedBlock: BigNumber;
        startedAtBlock: BigNumber;
      }
    >;

    removeAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resetRewards(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFutureBlockReward(
      _pool: string,
      _fromBlock: BigNumberish,
      _rewardPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinClaimedTimeWindow(
      _minClaimedTimeWindow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    syncPool(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    syncRewardInfo(
      _user: string,
      _newStakingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateUnstartedPools(
      _pools: string[],
      _startedAtBlocks: BigNumberish[],
      _rewardPerBlocks: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userRewardInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        debitedRewards: BigNumber;
        creditedRewards: BigNumber;
        lastClaimedTimestamp: BigNumber;
      }
    >;

    whitelistPools(
      _pools: string[],
      _startedAtBlocks: BigNumberish[],
      _rewardPerBlocks: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawEther(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  WRON(overrides?: CallOverrides): Promise<string>;

  admin(overrides?: CallOverrides): Promise<string>;

  allocateRewards(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  blockRewards(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { fromBlock: BigNumber; rewardPerBlock: BigNumber }
  >;

  canObtainRewards(
    _pool: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  changeAdmin(
    _newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBlockReward(
    _pool: string,
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getIntervalRewards(
    _pool: string,
    _fromBlock: BigNumberish,
    _toBlock: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPendingRewards(
    _pool: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPoolInfo(
    _pool: string,
    overrides?: CallOverrides
  ): Promise<IERC20StakingManager.PoolStructOutput>;

  isPoolStarted(_pool: string, overrides?: CallOverrides): Promise<boolean>;

  isPoolWhitelisted(_pool: string, overrides?: CallOverrides): Promise<boolean>;

  minClaimedTimeWindow(overrides?: CallOverrides): Promise<BigNumber>;

  poolInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber] & {
      stakingToken: string;
      rewardToken: string;
      accumulatedRewardsPerShare: BigNumber;
      lastSyncedBlock: BigNumber;
      startedAtBlock: BigNumber;
    }
  >;

  removeAdmin(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resetRewards(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFutureBlockReward(
    _pool: string,
    _fromBlock: BigNumberish,
    _rewardPerBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinClaimedTimeWindow(
    _minClaimedTimeWindow: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  syncPool(
    _pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  syncRewardInfo(
    _user: string,
    _newStakingAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateUnstartedPools(
    _pools: string[],
    _startedAtBlocks: BigNumberish[],
    _rewardPerBlocks: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userRewardInfo(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      debitedRewards: BigNumber;
      creditedRewards: BigNumber;
      lastClaimedTimestamp: BigNumber;
    }
  >;

  whitelistPools(
    _pools: string[],
    _startedAtBlocks: BigNumberish[],
    _rewardPerBlocks: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawEther(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawToken(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    WRON(overrides?: CallOverrides): Promise<string>;

    admin(overrides?: CallOverrides): Promise<string>;

    allocateRewards(
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { _rewardToken: string; _earnedRewards: BigNumber }
    >;

    blockRewards(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        fromBlock: BigNumber;
        rewardPerBlock: BigNumber;
      }
    >;

    canObtainRewards(
      _pool: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    changeAdmin(_newAdmin: string, overrides?: CallOverrides): Promise<void>;

    getBlockReward(
      _pool: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIntervalRewards(
      _pool: string,
      _fromBlock: BigNumberish,
      _toBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingRewards(
      _pool: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolInfo(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<IERC20StakingManager.PoolStructOutput>;

    isPoolStarted(_pool: string, overrides?: CallOverrides): Promise<boolean>;

    isPoolWhitelisted(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    minClaimedTimeWindow(overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber] & {
        stakingToken: string;
        rewardToken: string;
        accumulatedRewardsPerShare: BigNumber;
        lastSyncedBlock: BigNumber;
        startedAtBlock: BigNumber;
      }
    >;

    removeAdmin(overrides?: CallOverrides): Promise<void>;

    resetRewards(_user: string, overrides?: CallOverrides): Promise<void>;

    setFutureBlockReward(
      _pool: string,
      _fromBlock: BigNumberish,
      _rewardPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinClaimedTimeWindow(
      _minClaimedTimeWindow: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    syncPool(_pool: string, overrides?: CallOverrides): Promise<void>;

    syncRewardInfo(
      _user: string,
      _newStakingAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateUnstartedPools(
      _pools: string[],
      _startedAtBlocks: BigNumberish[],
      _rewardPerBlocks: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    userRewardInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        debitedRewards: BigNumber;
        creditedRewards: BigNumber;
        lastClaimedTimestamp: BigNumber;
      }
    >;

    whitelistPools(
      _pools: string[],
      _startedAtBlocks: BigNumberish[],
      _rewardPerBlocks: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawEther(overrides?: CallOverrides): Promise<void>;

    withdrawToken(_token: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      _oldAdmin?: string | null,
      _newAdmin?: string | null
    ): AdminChangedEventFilter;
    AdminChanged(
      _oldAdmin?: string | null,
      _newAdmin?: string | null
    ): AdminChangedEventFilter;

    "AdminRemoved(address)"(_oldAdmin?: string | null): AdminRemovedEventFilter;
    AdminRemoved(_oldAdmin?: string | null): AdminRemovedEventFilter;

    "MinClaimedTimeWindowUpdated(uint256,uint256)"(
      _new?: BigNumberish | null,
      _old?: BigNumberish | null
    ): MinClaimedTimeWindowUpdatedEventFilter;
    MinClaimedTimeWindowUpdated(
      _new?: BigNumberish | null,
      _old?: BigNumberish | null
    ): MinClaimedTimeWindowUpdatedEventFilter;

    "PoolSynced(address,uint256,uint256)"(
      _pool?: null,
      _accumulatedPerShare?: null,
      _lastSyncedBlock?: null
    ): PoolSyncedEventFilter;
    PoolSynced(
      _pool?: null,
      _accumulatedPerShare?: null,
      _lastSyncedBlock?: null
    ): PoolSyncedEventFilter;

    "PoolWhitelisted(address)"(_pool?: null): PoolWhitelistedEventFilter;
    PoolWhitelisted(_pool?: null): PoolWhitelistedEventFilter;

    "RewardPerBlockUpdated(address,tuple[])"(
      _pool?: null,
      _blockRewards?: null
    ): RewardPerBlockUpdatedEventFilter;
    RewardPerBlockUpdated(
      _pool?: null,
      _blockRewards?: null
    ): RewardPerBlockUpdatedEventFilter;

    "UserRewardUpdated(address,address,tuple)"(
      _pool?: null,
      _user?: null,
      _rewardInfo?: null
    ): UserRewardUpdatedEventFilter;
    UserRewardUpdated(
      _pool?: null,
      _user?: null,
      _rewardInfo?: null
    ): UserRewardUpdatedEventFilter;
  };

  estimateGas: {
    WRON(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    allocateRewards(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    blockRewards(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canObtainRewards(
      _pool: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBlockReward(
      _pool: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIntervalRewards(
      _pool: string,
      _fromBlock: BigNumberish,
      _toBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingRewards(
      _pool: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolInfo(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    isPoolStarted(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    isPoolWhitelisted(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minClaimedTimeWindow(overrides?: CallOverrides): Promise<BigNumber>;

    poolInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resetRewards(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFutureBlockReward(
      _pool: string,
      _fromBlock: BigNumberish,
      _rewardPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinClaimedTimeWindow(
      _minClaimedTimeWindow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    syncPool(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    syncRewardInfo(
      _user: string,
      _newStakingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateUnstartedPools(
      _pools: string[],
      _startedAtBlocks: BigNumberish[],
      _rewardPerBlocks: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userRewardInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistPools(
      _pools: string[],
      _startedAtBlocks: BigNumberish[],
      _rewardPerBlocks: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawEther(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WRON(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allocateRewards(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    blockRewards(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canObtainRewards(
      _pool: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBlockReward(
      _pool: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIntervalRewards(
      _pool: string,
      _fromBlock: BigNumberish,
      _toBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingRewards(
      _pool: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolInfo(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPoolStarted(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPoolWhitelisted(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minClaimedTimeWindow(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeAdmin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resetRewards(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFutureBlockReward(
      _pool: string,
      _fromBlock: BigNumberish,
      _rewardPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinClaimedTimeWindow(
      _minClaimedTimeWindow: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    syncPool(
      _pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    syncRewardInfo(
      _user: string,
      _newStakingAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateUnstartedPools(
      _pools: string[],
      _startedAtBlocks: BigNumberish[],
      _rewardPerBlocks: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userRewardInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistPools(
      _pools: string[],
      _startedAtBlocks: BigNumberish[],
      _rewardPerBlocks: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawEther(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
