// @generated by protoc-gen-es v1.8.0
// @generated from file rpc/proto/v1/rpc.proto (package rpc.proto.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum rpc.proto.v1.Type
 */
export declare enum Type {
  /**
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: TYPE_DATA = 1;
   */
  DATA = 1,

  /**
   * @generated from enum value: TYPE_ERROR = 2;
   */
  ERROR = 2,

  /**
   * @generated from enum value: TYPE_DONE = 3;
   */
  DONE = 3,
}

/**
 * @generated from message rpc.proto.v1.Frame
 */
export declare class Frame extends Message<Frame> {
  /**
   * @generated from field: rpc.proto.v1.Type type = 1;
   */
  type: Type;

  /**
   * @generated from field: int32 id = 2;
   */
  id: number;

  /**
   * @generated from field: bytes data = 3;
   */
  data: Uint8Array;

  constructor(data?: PartialMessage<Frame>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "rpc.proto.v1.Frame";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Frame;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Frame;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Frame;

  static equals(a: Frame | PlainMessage<Frame> | undefined, b: Frame | PlainMessage<Frame> | undefined): boolean;
}

/**
 * @generated from message rpc.proto.v1.Error
 */
export declare class Error extends Message<Error> {
  /**
   * @generated from field: uint64 code = 1;
   */
  code: bigint;

  /**
   * @generated from field: string message = 2;
   */
  message: string;

  constructor(data?: PartialMessage<Error>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "rpc.proto.v1.Error";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Error;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Error;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Error;

  static equals(a: Error | PlainMessage<Error> | undefined, b: Error | PlainMessage<Error> | undefined): boolean;
}

/**
 * @generated from message rpc.proto.v1.Ok
 */
export declare class Ok extends Message<Ok> {
  /**
   * @generated from field: string message = 2;
   */
  message: string;

  constructor(data?: PartialMessage<Ok>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "rpc.proto.v1.Ok";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Ok;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Ok;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Ok;

  static equals(a: Ok | PlainMessage<Ok> | undefined, b: Ok | PlainMessage<Ok> | undefined): boolean;
}

/**
 * Specific logic
 *
 * @generated from message rpc.proto.v1.Session
 */
export declare class Session extends Message<Session> {
  /**
   * @generated from field: string session_id = 1;
   */
  sessionId: string;

  constructor(data?: PartialMessage<Session>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "rpc.proto.v1.Session";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Session;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Session;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Session;

  static equals(a: Session | PlainMessage<Session> | undefined, b: Session | PlainMessage<Session> | undefined): boolean;
}

